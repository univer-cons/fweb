<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Kullanƒ±cƒ± Paneli</title>
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
      font-family: "Poppins", sans-serif;
    }

    body {
      display: flex;
      height: 100vh;
      background: linear-gradient(135deg, #43cea2, #185a9d);
      overflow: hidden;
    }

    /* üîπ Sol Men√º */
    .sidebar {
      width: 250px;
      background: rgba(255, 255, 255, 0.15);
      backdrop-filter: blur(10px);
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding-top: 40px;
      transition: 0.3s;
    }

    .sidebar h2 {
      margin-bottom: 40px;
      font-size: 22px;
      letter-spacing: 1px;
    }

    .menu a {
      width: 100%;
      display: block;
      padding: 15px 20px;
      color: #fff;
      text-decoration: none;
      font-weight: 500;
      transition: 0.2s;
      border-left: 3px solid transparent;
    }

    .menu a:hover, .menu a.active {
      background: rgba(255, 255, 255, 0.25);
      border-left: 3px solid #fff;
    }

    .logout-btn {
      margin-top: auto;
      margin-bottom: 30px;
      background: #fff;
      color: #185a9d;
      border: none;
      padding: 10px 20px;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 600;
      transition: 0.2s;
    }

    .logout-btn:hover {
      background: #185a9d;
      color: #fff;
    }

    /* üîπ ƒ∞√ßerik Alanƒ± */
    .content {
      flex: 1;
      background: #f5f7fb;
      border-radius: 30px 0 0 30px;
      padding: 30px;
      overflow-y: auto;
    }

    .section {
      display: none;
      animation: fadeIn 0.3s ease;
    }

    .section.active {
      display: block;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    h1 {
      color: #333;
      margin-bottom: 20px;
    }

    .card {
      background: #fff;
      border-radius: 20px;
      padding: 20px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }

    input, textarea {
      width: 100%;
      padding: 10px;
      border: none;
      border-radius: 10px;
      background: #f1f1f1;
      font-size: 15px;
      margin-top: 10px;
      margin-bottom: 20px;
      outline: none;
      transition: 0.3s;
    }

    input:focus, textarea:focus {
      background: #e8e8e8;
    }

    button {
      background: linear-gradient(135deg, #43cea2, #185a9d);
      color: white;
      border: none;
      padding: 10px 20px;
      border-radius: 10px;
      cursor: pointer;
      font-size: 15px;
      font-weight: 600;
      transition: 0.2s;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }

    @media (max-width: 768px) {
      .sidebar {
        width: 70px;
      }
      .sidebar h2, .menu a span {
        display: none;
      }
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h2>Kullanƒ±cƒ±</h2>
    <div class="menu">
      <a href="#" class="active" data-section="files">üìÅ <span>Dosya G√∂nder</span></a>
      <a href="#" data-section="messages">üí¨ <span>Mesaj G√∂nder</span></a>
    </div>
    <button class="logout-btn" id="logoutBtn">√áƒ±kƒ±≈ü Yap</button>
  </div>

  <div class="content">
    <!-- Dosya G√∂nder -->
    <div id="files" class="section active">
      <h1>Dosya G√∂nder</h1>
      <div class="card">
        <p>Y√∂neticiye dosya y√ºkleyebilirsin:</p>
        <input type="file" id="fileInput" />
        <button id="uploadBtn">G√∂nder</button>
        <p id="uploadStatus"></p>
      </div>
    </div>

    <!-- Mesaj G√∂nder -->
    <div id="messages" class="section">
      <h1>Mesaj G√∂nder</h1>
      <div class="card">
        <p>Y√∂neticiye mesaj yaz:</p>
        <textarea id="messageText" rows="5" placeholder="Mesajƒ±nƒ± buraya yaz..."></textarea>
        <button id="sendMessageBtn">Mesaj G√∂nder</button>
        <p id="messageStatus"></p>
      </div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
    import { getAuth, signOut } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-storage.js";

    // üîß Firebase ayarlarƒ±nƒ± buraya ekle
    const firebaseConfig = {
     apiKey: "AIzaSyDMGZ1XtGWi4Cbo5nhhB2eQkcXTVU3aYk0",
      authDomain: "ahmet-consulting.firebaseapp.com",
      projectId: "ahmet-consulting",
      storageBucket: "ahmet-consulting.appspot.com",
      messagingSenderId: "253579961791",
      appId: "1:253579961791:web:738c1277d865069a22fdc5",
      measurementId: "G-KHQYBLGMN5"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    const storage = getStorage(app);

    // üîπ Men√º ge√ßi≈üleri
    const menuLinks = document.querySelectorAll('.menu a');
    const sections = document.querySelectorAll('.section');
    menuLinks.forEach(link => {
      link.addEventListener('click', e => {
        e.preventDefault();
        menuLinks.forEach(a => a.classList.remove('active'));
        link.classList.add('active');
        sections.forEach(sec => sec.classList.remove('active'));
        document.getElementById(link.dataset.section).classList.add('active');
      });
    });

    // üîπ Dosya y√ºkleme
    const fileInput = document.getElementById('fileInput');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadStatus = document.getElementById('uploadStatus');

    uploadBtn.addEventListener('click', async () => {
      const file = fileInput.files[0];
      if (!file) {
        uploadStatus.textContent = "L√ºtfen bir dosya se√ß!";
        return;
      }

      const storageRef = ref(storage, 'uploads/' + file.name);
      await uploadBytes(storageRef, file);
      const url = await getDownloadURL(storageRef);

      await addDoc(collection(db, "files"), {
        fileName: file.name,
        fileURL: url,
        uploadedAt: serverTimestamp()
      });

      uploadStatus.textContent = "‚úÖ Dosya ba≈üarƒ±yla g√∂nderildi!";
      fileInput.value = "";
    });

    // üîπ Mesaj g√∂nderme
    const messageText = document.getElementById('messageText');
    const sendMessageBtn = document.getElementById('sendMessageBtn');
    const messageStatus = document.getElementById('messageStatus');

    sendMessageBtn.addEventListener('click', async () => {
      const text = messageText.value.trim();
      if (!text) {
        messageStatus.textContent = "Mesaj bo≈ü olamaz!";
        return;
      }

      await addDoc(collection(db, "messages"), {
        text: text,
        sentAt: serverTimestamp()
      });

      messageStatus.textContent = "‚úÖ Mesaj g√∂nderildi!";
      messageText.value = "";
    });

    // üîπ √áƒ±kƒ±≈ü
    document.getElementById("logoutBtn").addEventListener("click", async () => {
      await signOut(auth);
      window.location.href = "index.html";
    });
  </script>
</body>
</html>
s
